-----------------------------------------------------------------------
--
--  Surrender 'win' condition system.
--
-- A player is eliminated when they concede (through the Surrender button in the Pause menu). 
-- The last remaining player/team wins. 
--
-- (c) Relic Entertainment 2017
--
-----------------------------------------------------------------------


-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

_surrender = {
	lastManStanding = false,	-- true if diplomacy enabled (i.e. not fixed teams)
	cue = {			-- event cue shown when player or team surrenders 
		lifetime = 10.0,		-- should match the defaults set in AE under tuning.ui.event_cues
		repeatTime = 30.0,		-- should match the defaults set in AE under tuning.ui.event_cues
		title = Loc_Empty(),
		desc = Loc_Empty(),
		sfx = "sfx_ui_surrendered_notification_play",
		icon = "icons\\event_queue_high_priority_large",
		color = {r = 255, g = 255, b = 255, a = 255},
		template = "high_priority", 
		style = ECV_Queue | ECV_Title,
	},	
}

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

Core_RegisterModule("Surrender")


-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Callback invoked when Diplomacy is enabled.
function Surrender_DiplomacyEnabled(isEnabled)		
	_surrender.lastManStanding = isEnabled
end


function Surrender_Start()			
	Network_RegisterEvent("Surrender_Notify")					
end


-- Callback invoked by OnSurrenderMatchRequested() in core.scar in response to local player's surrender request (via Surrender button in Pause menu).
function Surrender_OnSurrenderMatchRequested()	
	Network_CallEvent("Surrender_Notify")		-- Broadcast surrender request to all players	
end


-- Callback invoked by Core_SetPlayerDefeated() when a player is eliminated.
function Surrender_OnPlayerDefeated(defeatedPlayer, reason)
	if reason == WR_SURRENDER then 
		
		if Player_IsAlive(defeatedPlayer.id) then
			-- Kill player
			World_KillPlayer(defeatedPlayer.id, KPR_Lost)
		end
		
		-- Check if any player victorious
		Surrender_CheckVictory(defeatedPlayer.id)
	
		local localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
		if defeatedPlayer == localPlayer and Core_RevealFOWOnEliminationEnabled() then
			FOW_UIRevealAll()
		end
	end
end

-----------------------------------------------------------------------
-- Private/Internal functions
-----------------------------------------------------------------------

function Surrender_CheckVictory(surrenderingPlayerId)
	
	-- Track one of the surviving players
	local winning_player = nil
	
	-- For all players
	for i, player in pairs(PLAYERS) do
		
		-- If player is not eliminated and is an enemy of the surrendering player
		if not Core_IsPlayerEliminated(player.id) and Player_ObserveRelationship(player.id, surrenderingPlayerId) == R_ENEMY then 
			
			-- Get remaining enemies of player
			local enemies_remaining = Surrender_GetActiveEnemyCount(player)
			
			-- If no enemies remain
			if enemies_remaining == 0 then
				-- Track player
				winning_player = player
				break
			end
		end
	end
	
	-- If a winning player was found, set them and their allies as victorious
	if winning_player ~= nil then
		
		-- For every player
		for i, player in pairs(PLAYERS) do
			
			-- If player is winning player's ally
			if Player_ObserveRelationship(player.id, winning_player.id) == R_ALLY then
				Core_SetPlayerVictorious(player.id, Surrender_WinnerPresentation, WR_SURRENDER)	
			end
		end
		
		Core_OnGameOver()
	
	-- If a winning player was not found, check if no humans remain
	else
		
		-- Track humans remaining
		local humansRemaining = {}
		for i, player in pairs(PLAYERS) do
			if (not player.isEliminated) and Player_IsHuman(player.id) then
				table.insert(humansRemaining, player)
			end
		end
		
		-- If no humans remain, resolve match as winnerless. This gracefully resolves matches where the last human player surrenders in an AI game with RelicLink.
		if #humansRemaining == 0 then
			Core_OnGameOver()
			Core_WinnerlessGameOver(Surrender_LoserPresentation, WR_SURRENDER)
		end
	end
end

-- Returns number of enemies remaining for a given player
function Surrender_GetActiveEnemyCount(player)
	
	-- Track enemies remaining
	local enemies_remaining = {}
	
	-- For every other player
	for i, player_other in pairs(PLAYERS) do
		
		-- If other player is not the given player, is an enemy, and is not eliminated
		if player ~= player_other and not Core_IsPlayerEliminated(player_other.id) and Player_ObserveRelationship(player.id, player_other.id) == R_ENEMY then 
			
			-- Add enemy player to table
			table.insert(enemies_remaining, player_other)
		end
	end
	
	-- Return number of enemies remaining
	return #enemies_remaining
end

-----------------------------------------------------------------------
-- Network functions
-----------------------------------------------------------------------

function Surrender_Notify(playerID)	
	
	local player = Core_GetPlayersTableEntry(playerID)	
		
	if not player.isEliminated then
		
		local localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
		if not localPlayer.isEliminated then 
			local cue = _surrender.cue			
			local title = Loc_FormatText(11161289, player.playerName) -- "%1PLAYER_NAME% surrendered"			
			UI_CreateEventCueClickable(-1, cue.lifetime, 0, cue.repeatTime, title, cue.desc, cue.template, cue.icon, cue.sfx, cue.color.r, cue.color.g, cue.color.b, cue.color.a, cue.style, nothing)	
			
		end
		
		Core_SetPlayerDefeated(player.id, Surrender_LoserPresentation, WR_SURRENDER)
	end
end



-----------------------------------------------------------------------
-- UI functions
-----------------------------------------------------------------------

-- Victory presentation
function Surrender_WinnerPresentation(playerID)
	if playerID == Game_GetLocalPlayer() then	
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = "icons\\races\\common\\victory_conditions\\victory_condition_conquest", 
			_endType = Loc_GetString(11161277), 		-- "VICTORY"
			_message = Loc_Empty(), 					-- Unused
			_sound = "ConquestVictoryEvent", 
			_videoURI = "stinger_victory"
		})
	end
end

-- Defeat presentation
function Surrender_LoserPresentation(playerID)
	if playerID == Game_GetLocalPlayer() then

		local title = Loc_GetString(11165094)			-- "DEFEAT"
		local video = "stinger_defeat"
		
		-- Use 'eliminated' instead of 'defeat' if at least one ally remaining
		if not _annihilation.is_diplomacy_enabled then
			local player_local = Core_GetPlayersTableEntry(playerID)
			for _, player in pairs(PLAYERS) do 
				if not player.isLocal and not player.isEliminated and Player_ObserveRelationship(player_local.id, player.id) == R_ALLY then
					title = Loc_GetString(11165821)		-- "ELIMINATED"
					video = "stinger_eliminated"
					break
				end
			end
		end
		
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = nil,						-- unused
			_endType = title, 
			_message = Loc_Empty(), 			-- unused 
			_sound = "ConquestDefeatEvent", 
			_videoURI = video
		})
	end
end