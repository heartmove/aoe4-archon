-----------------------------------------------------------------------
-- Nomad Start Condition 
--
-- (c) Relic Entertainment 2017
-----------------------------------------------------------------------

import("ScarUtil.scar")							-- Contains game helper functions
-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

_nomadStart = {
	timeStarted = 0,
	timeThreshold = 0,
	timeInterval = 0.5,							-- initialized here to prevent script reloading from failing
	duration = 90,								-- time (in seconds) until players accumulate enough resources to build a town center
--	FOWRevealRadius = 120,						-- radius around player start position within which FOW is initially revealed
}


-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

Core_RegisterModule("NomadStart")


-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------


 -- Called by OnInit() in core.scar
function NomadStart_OnInit()

	-- Rule_AddOneShot(NomadStart_DelayedInit, 0.125)
	NomadStart_DelayedInit()
	
	Rule_AddGlobalEvent(NomadStart_OnConstructionComplete, GE_ConstructionComplete)
	Rule_AddGlobalEvent(NomadStart_OnSquadKilled, GE_SquadKilled)
end


function NomadStart_OnConstructionComplete(context)
	Rule_AddOneShot(NomadStart_PostConstructionComplete, 0.25, context)
end

function NomadStart_PostConstructionComplete(context, data)
	if data.player == nil or data.entity == nil then
		return
	end	
	-- Get player constructing
	local player = Core_GetPlayersTableEntry(data.player)
	if not Player_IsAlive(player.id) then
		return
	end
	
	local entity = data.entity
	local entity_id = Entity_GetID(entity)  
	-- If constructed entity is a Landmark or Capital
	if (NomadStart_IsACapital(entity)) and player.hadScouts == nil then
		local pos = Util_GetOffsetPosition(Entity_GetPosition(entity), 10, 10)
		NomadStart_SpawnScout(player, pos)
		player.hadScouts = 1
		local raceName = Player_GetRaceName(player.id)
		if raceName == 'hre' then
			pos =  Util_GetOffsetPosition(Entity_GetPosition(entity), 11, 11)
			NomadStart_SpawnMonk(player, pos)
		elseif raceName == 'mongol' then
			pos =  Util_GetOffsetPosition(Entity_GetPosition(entity), 12, 12)
			
		end
	end
end


function NomadStart_IsACapital(entity)		
	return Entity_GetStateModelBool(entity, "town_center_is_capital") or Entity_IsOfType(entity, "town_center_capital")
end

function NomadStart_DelayedInit()

	-- Remove player's initial buildings
	for i, player in pairs(PLAYERS) do		
		SGroup_DestroyAllSquads(Player_GetSquads(player.id))
		EGroup_DestroyAllEntities(Player_GetEntities(player.id))
		
		Player_SetStateModelFloat(player.id, "has_capital", 0)
		Player_SetStateModelBool(player.id, "player_can_construct_structures", true)
	end
	NomadStart_CreateSpawn()
end


--function NomadStart_PostInit()
function NomadStart_Start()
	FOW_UnExploreAll( )
	FOW_UnRevealAll( )		
	FOW_UnExploreAll( )	
	FOW_UnRevealAll( )	
	local highestTownCenterCost = 0				-- highest resource cost of town center (determines rate of resource accumulation)	
		
	for i, player in pairs(PLAYERS) do	
		local townCenterCost = Player_GetEntityBPCost(player.id, Cardinal_ConvertTypeToEntityBlueprint("town_center", player.id))		-- town center cost in food, wood, stone, gold
		print("civ:" .. Player_GetRaceName(player.id))
		print("food:".. tostring(townCenterCost.food))
		print("wood:".. tostring(townCenterCost.wood))
		print("stone:".. tostring(townCenterCost.stone))
		print("gold:".. tostring(townCenterCost.gold))
		local player_civ = Player_GetRaceName(player.id)
		townCenterCost = {
				food = 0,
				wood = 0,
				stone = 0,
				gold = 0,
			}
		--[[
		if _mod.nomad_slow_start then 
			townCenterCost = {
				food = 0,
				wood = 400,
				stone = 350,
				gold = 0,
			}
			
		end 
		--]]
		
		if player_civ == "hre" then
			townCenterCost.gold = 100
		end
		if Player_GetRaceName(player.id) == "hre" then
			townCenterCost.gold = townCenterCost.gold
		end
		
		-- Town center cost is not included in starting resources, so we need to add enough
		Player_AddResources(player.id, townCenterCost)

		for k, v in pairs(townCenterCost) do
			highestTownCenterCost = math.max(highestTownCenterCost, v)
		end
		
		Player_SetStateModelFloat(player.id, "has_capital", 0)
		Player_SetStateModelBool(player.id, "player_can_construct_structures", true)
		
		NomadStart_ModifierTCCost(player, townCenterCost)
	
		if _nomadStart.FOWRevealRadius ~= nil then
			FOW_PlayerRevealArea(player.id, player.startingPos, _nomadStart.FOWRevealRadius, 0.25)		
		end
	end
	
	
	-- time tracking data
	_nomadStart.timeStarted = World_GetGameTime()
	_nomadStart.timeThreshold = 0
	_nomadStart.timeInterval = _nomadStart.duration / highestTownCenterCost
	
	
	-- NomadStart_ResetResources()
end


function NomadStart_ModifierTCCost(player, townCenterCost) 
	
	player_civ = Player_GetRaceName(player.id)
	-- Get Villager BP based on civ
	local ebp
	
	if player_civ == "english" then
		ebp = BP_GetEntityBlueprint("building_town_center_capital_eng")
		
	elseif player_civ == "chinese" then 
		ebp = BP_GetEntityBlueprint("building_town_center_capital_chi")
		
	elseif player_civ == "malian" then
		ebp = BP_GetEntityBlueprint("building_town_center_capital_mal")
		
	elseif player_civ == "ottoman" then
		ebp = BP_GetEntityBlueprint("building_town_center_capital_ott")	
		
	elseif player_civ == "french" then
		ebp = BP_GetEntityBlueprint("building_town_center_capital_fre")
		
	elseif player_civ == "hre" then
		ebp = BP_GetEntityBlueprint("building_town_center_capital_hre")
		
	elseif player_civ == "mongol" then
		ebp = BP_GetEntityBlueprint("building_town_center_capital_mon")
		
	elseif player_civ == "rus" then
		ebp = BP_GetEntityBlueprint("building_town_center_capital_rus")
		
	elseif player_civ == "sultanate" then
		ebp = BP_GetEntityBlueprint("building_town_center_capital_sul")
		
	elseif player_civ == "abbasid" then		
		ebp = BP_GetEntityBlueprint("building_town_center_capital_abb")
	end
	
	NomadStart_TCCost_ApplyModifier(player.id, ebp, "resource_entity_cost_food", townCenterCost.food)
	NomadStart_TCCost_ApplyModifier(player.id, ebp, "resource_entity_cost_wood", townCenterCost.wood)
	NomadStart_TCCost_ApplyModifier(player.id, ebp, "resource_entity_cost_stone", townCenterCost.stone)
end

function NomadStart_TCCost_ApplyModifier(player_id, modifier_ebp, modifier_type, modifier_value)
	Modifier_ApplyToPlayer(Modifier_Create(MAT_EntityType, modifier_type, MUT_Addition, false, modifier_value, modifier_ebp), player_id, 0.0)
end	

function NomadStart_ResetResources()
	
	for i, player in pairs(PLAYERS) do	
	
		-- Track resources remaining to provide
		player._nomadStart = { resources = {} }
		player._nomadStart.resources["Food"] = Player_GetResource(player.id, RT_Food)
		player._nomadStart.resources["Wood"] = Player_GetResource(player.id, RT_Wood)
		player._nomadStart.resources["Stone"] = Player_GetResource(player.id, RT_Stone)
		player._nomadStart.resources["Gold"] = Player_GetResource(player.id, RT_Gold)

		-- Reset resources
		Player_ResetResource(player.id, RT_Food)
		Player_ResetResource(player.id, RT_Wood)
		Player_ResetResource(player.id, RT_Stone)
		Player_ResetResource(player.id, RT_Gold)									
	end
	
	Rule_Add(NomadStart_IncrementResources)
end


-- Rule that incrementally returns initial resources to players over time.
function NomadStart_IncrementResources()	
	
	if World_GetGameTime() - _nomadStart.timeStarted >= _nomadStart.timeThreshold then
		local allResourcesReceived = true
		
		for i, player in pairs(PLAYERS) do
		
			local _IncrementResource = function(resIndex, resType) 				
				if player._nomadStart.resources[resIndex] > 0 then
					if player._nomadStart.resources[resIndex] == 1 then
						Player_AddResource(player.id, resType, 1)
						player._nomadStart.resources[resIndex] = 0
					else
						Player_AddResource(player.id, resType, 1)
						player._nomadStart.resources[resIndex] = player._nomadStart.resources[resIndex] - 1						
					end
				end
			end
			
			_IncrementResource("Food", RT_Food)
			_IncrementResource("Wood", RT_Wood)
			_IncrementResource("Stone", RT_Stone)
			_IncrementResource("Gold", RT_Gold)	
			
			-- Stop when player has received all resources
			for k,v in pairs(player._nomadStart.resources) do
				if player._nomadStart.resources[k] > 0 then
					allResourcesReceived = false
				end
			end
		end		
		
		if allResourcesReceived then		
			NomadStart_End()
		else
			_nomadStart.timeThreshold = _nomadStart.timeThreshold + _nomadStart.timeInterval
		end		
	end	
end


-- Ends nomad start's incremental resource accumulation. Gives players remaining resources, if any.
function NomadStart_End()

	if Rule_Exists(NomadStart_IncrementResources) then	
	
		Rule_Remove(NomadStart_IncrementResources)								
		
		for i, player in pairs(PLAYERS) do		
			Player_AddResource(player.id, RT_Food, player._nomadStart.resources["Food"])
			Player_AddResource(player.id, RT_Wood, player._nomadStart.resources["Wood"])
			Player_AddResource(player.id, RT_Stone, player._nomadStart.resources["Stone"])
			Player_AddResource(player.id, RT_Gold, player._nomadStart.resources["Gold"])
			player._nomadStart = nil	
		end					
		
		_nomadStart = nil
	end
end

function NomadStart_CreateSpawn()
	for i, player in pairs(PLAYERS) do
		EGroup_DestroyAllEntities(Player_GetEntities(player.id))
		
		-- Increase starting resources to cover building a TC
		NomadStart_CreateVillager(player, 3)
		
	end
end

function NomadStart_CreateVillager(player, number) 
	player_civ = Player_GetRaceName(player.id)
	-- Get Villager BP based on civ
	local sbp_villager
	
	if player_civ == "english" then
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_eng")
		
	elseif player_civ == "chinese" then
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_chi")
		
	elseif player_civ == "malian" then
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_mal")
		
	elseif player_civ == "ottoman" then
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_ott")	
		
	elseif player_civ == "french" then
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_fre")
		
	elseif player_civ == "hre" then
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_hre")
		
	elseif player_civ == "mongol" then
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_mon")
		
	elseif player_civ == "rus" then
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_rus")
		
	elseif player_civ == "sultanate" then
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_sul")
		
	elseif player_civ == "abbasid" then		
		sbp_villager = BP_GetSquadBlueprint("unit_villager_1_abb")
	end
	
	-- Get spawn dimensions
	local radius = intMax(World_GetWidth(), World_GetLength())/1.8 -- 1.8 to try and tune villager spawn out from the middle of the map
	local map_center = World_Pos(0, 0, 0)
	
	-- Generate random location and spawn vils 
	local i = 0
	while i < number do
		-- Generate random spawn location
		
		local randx = World_GetRand(0-radius, radius)
		local randz = World_GetRand(0-radius, radius)
		
		--local rand_pos = Util_GetRandomPosition(map_center, radius, true)
		local height = World_GetHeightAt(randx, randz)
		local spawn_pos = World_Pos(randx, height, randz)
		-- Create villager squad and spawn at random location
		local sg_villager = SGroup_CreateIfNotFound("sg_villager" .. i .. tostring(player.id))
		UnitEntry_DeploySquads(player.id, sg_villager, {{sbp = sbp_villager, numSquads = 1 }}, spawn_pos)
		
		i = i + 1
	end
end


function NomadStart_SpawnScout(player, pos) 
	player_civ = Player_GetRaceName(player.id)
	
	local teammate = Archon_GetMyTeammate(player.id)
	if teammate == nil then 
		return 
	end
	
	local assignPlayer = teammate
	
	-- Get Villager BP based on civ
	local sbp_scout
	
	if player_civ == "english" then
		sbp_scout = BP_GetSquadBlueprint("unit_scout_1_eng")
		
	elseif player_civ == "chinese" then
		sbp_scout = BP_GetSquadBlueprint("unit_scout_1_chi")
		
	elseif player_civ == "malian" then
		sbp_scout = BP_GetSquadBlueprint("unit_scout_1_mal")
		
	elseif player_civ == "ottoman" then
		sbp_scout = BP_GetSquadBlueprint("unit_scout_1_ott")	
		
	elseif player_civ == "french" then
		sbp_scout = BP_GetSquadBlueprint("unit_scout_1_fre")
		
	elseif player_civ == "hre" then
		sbp_scout = BP_GetSquadBlueprint("unit_scout_1_hre")
		
	elseif player_civ == "mongol" then
		sbp_scout = BP_GetSquadBlueprint("unit_khan_1_mon")
		
	elseif player_civ == "rus" then
		sbp_scout = BP_GetSquadBlueprint("unit_scout_1_rus")
		assignPlayer = player
	elseif player_civ == "sultanate" then
		sbp_scout = BP_GetSquadBlueprint("unit_scout_1_sul")
		
	elseif player_civ == "abbasid" then		
		sbp_scout = BP_GetSquadBlueprint("unit_scout_1_abb")
	end
	


	
	local spawn_pos = pos
	-- Create villager squad and spawn at random location
	local sg_scout = SGroup_CreateIfNotFound("sg_scout" .. tostring(player.id))
	UnitEntry_DeploySquads(assignPlayer.id, sg_scout, {{sbp = sbp_scout, numSquads = 1 }}, spawn_pos)
		
end

function NomadStart_SpawnMonk(player, pos) 
	local spawn_pos = pos
	local sbp_monk = BP_GetSquadBlueprint("unit_monk_1_hre")
	-- Create villager squad and spawn at random location
	local sg_monk = SGroup_CreateIfNotFound("sg_monk" .. tostring(player.id))
	UnitEntry_DeploySquads(player.id, sg_monk, {{sbp = sbp_monk, numSquads = 1 }}, spawn_pos)
end


function NomadStart_SpawnMonk2(player, pos) 
	local spawn_pos = pos
	local sbp_monk = BP_GetSquadBlueprint("monk")
	-- Create villager squad and spawn at random location
	local sg_monk = SGroup_CreateIfNotFound("sg_monk" .. tostring(player.id))
	UnitEntry_DeploySquads(player.id, sg_monk, {{sbp = sbp_monk, numSquads = 1 }}, spawn_pos)
end


function NomadStart_OnSquadKilled(context) 
	if context == nil or context.killer == nil  or context.victim == nil or World_OwnsSquad(context.victim) then
		return 
	end
	if context.killer then
		local ownerId = Squad_GetPlayerOwner(context.victim)
		if ownerId == nil then
			return
		end
		local owner = Core_GetPlayersTableEntry(ownerId)
		if owner and not Player_IsAlive(owner.id) then
			return
		end
		
		local time = World_GetGameTime()
		if time < 30 then
			NomadStart_CreateVillager(owner, 1)
		end
	end
end

-----------------------------------------------------------------------
-- Helper Functions 
-----------------------------------------------------------------------

--takes two int values and returns the greatest of the two
function intMax(x, y)
	if x > y then
		return x 
	end
	return y
end
